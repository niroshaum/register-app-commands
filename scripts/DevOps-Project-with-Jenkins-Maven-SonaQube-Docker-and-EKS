create  2 instance t2.micro, 20 gb storage
  # Jenkins-Master
  #Jenkins-Agent
Connect to MobaXterm
============================================================= Install and Configure the Jenkins-Master & Jenkins-Agent =============================================================
## Install Java
$ sudo apt update
$ sudo apt upgrade
$ sudo nano /etc/hostname
$ sudo init 6
$ sudo apt install openjdk-17-jre
$ java -version

## Install Jenkins on the master node
Refer--https://www.jenkins.io/doc/book/installing/linux/
curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null

$sudo apt-get update
$sudo apt-get install jenkins
$ sudo systemctl enable jenkins       //Enable the Jenkins service to start at boot
$ sudo systemctl start jenkins        //Start Jenkins as a service
$ systemctl status jenkins

##Install docker on the Agent node
sudo apt-get install docker.io
sudo usermod -aG docker $USER

##ssh configuration on Jenkins-Master and Jenkins-Agent node
$ sudo nano /etc/ssh/sshd_config
  --uncomment--> PubkeyAuthentication yes
             --> AuthorizedKeysFile      .ssh/authorized_keys .ssh/authorized_keys2
$ sudo service ssh reload

## key generation on the Jenkins-Master node
$ ssh-keygen OR $ ssh-keygen -t ed25519
$ cd .ssh
##Copy the Jenkins-Master public key and paste to Jenkins-Agent- authorized file

===============================================================================================================================================================
## Add port 8080 in the Jenkins-Master-->inbound rule
## Copy the Jenkins_Master public Ip and open in browser with port number 8080

##creating nodes
  Manage jenkins->nodes->built-in-nodes->configure-> under configure change number executors 2 to 0->save
  Manage jenkins->nodes->built-in-nodes->configure-> create new node->Jenkins-Agent->Permanent Agent->create
    name->Jenkins-Agent
    number of executors->2
    remote root directory->/home/ubuntu
    labels->Jenkins-Agent
    Launch method- launch via ssh
      host-copy Jenkins-Agent private IP
      credentials->add->SSH username with private key
                    id->Jenkins-Agent
                    username->ubuntu
                    privatkey->enter directly private key from Jenkins-Master->add
      Host Key Verification Strategy-> Non verifying Verification Strategy
   save

##After the above node configuration create 'test' pipeline with 'Hello-world' and build pipeline. 
      build success-connectivity successful

##Integrate maven to jenkins and add github credentials to Jenkins.
#install plugins
Manage jenkins->avaialble plugins->
    Maven Integration
    Pipeline maven integration
    eclipse temurin installer
Manage jenkins->tools->
    maven installation->add maven->maven3
                        install automatically->use default version
    jdk installations->name ->Java17
                       install automatically->add installer->
                                              Install from adoptium.net->jdk-17.0.5+8
apply->save
#add github credentilas
Manage jenkins->credentails->add credentials->
                username->github username
                password->github classic API token
                id->github
                description->github
===============================================================================================================================================================
##Create pipeline script
use the register app from github
  cleanup workspace, checkout from SCM, build, test

create pipeline->register-app-ci
check the checkbox->discard old buils
                  ->max of days to keep build-5days
                  ->pipeline->pipeline script from SCM
                      repository url->register-app github url
                      credentials-select github
                      branch-main
                      Scriptpath-Jenkinsfile
apply->save->build the project

============================================================= Install and Configure the SonarQube =============================================================
create SonarQube instance with soecication t3.medium, 20 gb storage
connect to MobaXterm
## Update Package Repository and Upgrade Packages
    $ sudo apt update
    $ sudo apt upgrade
## Add PostgresSQL repository
    $ sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    $ wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &>/dev/null
## Install PostgreSQL
    $ sudo apt update
    $ sudo apt-get -y install postgresql postgresql-contrib
    $ sudo systemctl enable postgresql
## Create Database for Sonarqube
    $ sudo passwd postgres---give password 'sonar'
    $ su - postgres
    $ createuser sonar
    $ psql 
    $ ALTER USER sonar WITH ENCRYPTED password 'sonar';
    $ CREATE DATABASE sonarqube OWNER sonar;
    $ grant all privileges on DATABASE sonarqube to sonar;
    $ \q
    $ exit
## Add Adoptium repository
    $ sudo bash
    $ wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
    $ echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
 ## Install Java 17
    $ apt update
    $ apt install temurin-17-jdk
    $ update-alternatives --config java
    $ /usr/bin/java --version
    $ exit 
## Linux Kernel Tuning
   # Increase Limits
    $ sudo vim /etc/security/limits.conf
    //Paste the below values at the bottom of the file
    sonarqube   -   nofile   65536
    sonarqube   -   nproc    4096

    # Increase Mapped Memory Regions
    sudo vim /etc/sysctl.conf
    //Paste the below values at the bottom of the file
    vm.max_map_count = 262144

#### Sonarqube Installation ####
## Download and Extract
    $ sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.0.65466.zip
    $ sudo apt install unzip
    $ sudo unzip sonarqube-9.9.0.65466.zip -d /opt
    $ sudo mv /opt/sonarqube-9.9.0.65466 /opt/sonarqube
## Create user and set permissions
     $ sudo groupadd sonar
     $ sudo useradd -c "user to run SonarQube" -d /opt/sonarqube -g sonar sonar
     $ sudo chown sonar:sonar /opt/sonarqube -R
## Update Sonarqube properties with DB credentials
     $ sudo vim /opt/sonarqube/conf/sonar.properties
     //Find and replace the below values, you might need to add the sonar.jdbc.url
     sonar.jdbc.username=sonar
     sonar.jdbc.password=sonar
     (select 2nd one if you find 2 jdbc url)sonar.jdbc.url=jdbc:postgresql://localhost:5432/sonarqube
## Create service for Sonarqube
$ sudo vim /etc/systemd/system/sonar.service
//Paste the below into the file
     [Unit]
     Description=SonarQube service
     After=syslog.target network.target

     [Service]
     Type=forking

     ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
     ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop

     User=sonar
     Group=sonar
     Restart=always

     LimitNOFILE=65536
     LimitNPROC=4096

     [Install]
     WantedBy=multi-user.target

## Start Sonarqube and Enable service
     $ sudo systemctl start sonar
     $ sudo systemctl enable sonar
     $ sudo systemctl status sonar

## Watch log files and monitor for startup
     $ sudo tail -f /opt/sonarqube/logs/sonar.log

##edit inbound rules of SonarQube instance
  add port 9000
  copy public IP of SonarQube access it through browser
    sonarQube username-admin
    sonarQube password-admin

## Integrate sonarqube with jenkins
  #Go to sonarqube homepage->my account->security>
                        general token->name->jenkins-sonarqube-token
                                     ->type-> global analysis token
                                     ->expiry->no expiry -> 
      generate->copy the token and keep it notepad.

  #Go to Jenkins Dashboard-> Manage jenkins->credentails->add new credentials
                        kind-> secret text->copy the jenkins-sonarqube-token created in sonar
                        id-> jenkins-sonarqube-token
                        desc->jenkins-sonarqube-token
      create

  #Install and configure few plugins
    Manage jenkins->plugin->avaialable plugins->
                      SonarQube Scanner
                      SonarQuality gates
                      Quality gates
                 click on restart checkbox-jenkins restart
    you can verify downloaded plugins once you login back.

  #Hide warnings
    Jenkins right corner->configure which these...button
                        ->Hidden security warnings-> uncheck the box->apply and save

  #add sonarqube server to jenkins
    Manage jenkins->system->SonarQube installation->Add Sonarqube
                    name->sonarqube-server
                    url->http://private IP of sonarqube:9000
                    server authentication token-> jenkins-sonarqube-token(you created)
    apply->save

  # Add sonarqube scanner to jenkins
    Manage jenkins->tools->Sonarqube scanner installation->add sonarqube scanner
                  Name->sonarqube-scanner
                  install automatically
          apply->save

  # add stage to the pipeline script
        'Sonarqube Analysis' stage
            build the pipeline

 # Create sonar webhook
   Go to sonarqube homepage-> Admiistartor menu-> Configuration-> webhook->create
                            name->sonarqube-webhook
                            url->http://private Ip of jenkins master:8080/sonarqube-webhook/

  # add stage to the pipeline script
        'Quality gate' stage
             build the pipeline

================================================================================================================================================================================================
##Build and push Docker Image using pipeline script
  #Install plugins
  Go to jenkins->manage jenkins-> plugins->avaialable plugins->
                                          Docker
                                          Docker commons
                                          Docker API
                                          Docker-build-step
                                          CloudBeers docker Build and publish
          restart jenkins

  #Add DockerHub crdentials 
    Go to jenkins dashboard->Manage jenkins-> credentials->global menu->add
                            kind-> username with password
                                  username->nirosha
                                  password-> Login to dockerhub dashboard->myprofile->Account settings->security->Personal access token-> generate new token(give read,write,delete permission)
                                  id->dockerhub
                                  description->dockerhub

  # add stage to the pipeline script
        'Build & Push Docker Image' stage
         add the environment variables- give your docker username and docker password give docker id(dockerhub)
             build the pipeline

  # add stage to the pipeline script
        'Trivy scan' stage--give your image name and the github username
             build the pipeline

  # add stage to the pipeline script
        'Clean up aetifacts' stage
             build the pipeline 
===============================================================================================================================================================================================



============================================================= Setup Bootstrap Server for eksctl and Setup Kubernetes using eksctl =============================================================
##Create ec2 instance
  EKS-BootStrap-Server->t2.micro, 10gb storage, existing pem key

##configure in MobaXterm
$ sudo apt update
$ sudo apt upgrade
$ sudo nano /etc/hostname
$ sudo init 6

## Install AWS Cli on the above EC2
Refer--https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
$ sudo su
$cd ~
$pwd
$ curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
$ apt install unzip,   $ unzip awscliv2.zip
$ sudo ./aws/install
$ aws --version

## Installing kubectl
Refer--https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html
$ sudo su [change to root user]
$ curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.1/2023-04-19/bin/linux/amd64/kubectl
$ ll , $ chmod +x ./kubectl  //Gave executable permisions
$ mv kubectl /bin   //Because all our executable files are in /bin
$ kubectl version --output=yaml

## Installing  eksctl
Refer---https://github.com/eksctl-io/eksctl/blob/main/README.md#installation
$ curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
$ cd /tmp
$ ll [check eksctl is in executable mode or not]
$ sudo mv /tmp/eksctl /bin
$ eksctl version

## Create IAM role
  Go to IAM->roles->create role->AWS service            
                              -> under service or usecase select->EC2->next->administrator access->role name->eksctl-role->ceate role
  Go to ec2 EKS-BootStrap-Server
          actions->security->modify IAM role->select role->update

## Setup Kubernetes using eksctl
Refer--https://github.com/aws-samples/eks-workshop/issues/734
$ eksctl create cluster --name nirosha-cluster \
--region ap-south-1 \
--node-type t2.small \
--nodes 3 \  (min 3 nodes are required for this project)

##After EKS cluster creation
$ kubectl get nodes

============================================================= ArgoCD Installation on EKS Cluster and Add EKS Cluster to ArgoCD =============================================================
1 ) First, create a namespace
    $ kubectl create namespace argocd

2 ) Next, let's apply the yaml configuration files for ArgoCd
    $ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

3 ) Now we can view the pods created in the ArgoCD namespace.
    $ kubectl get pods -n argocd

4 ) To interact with the API Server we need to deploy the CLI:
    $ curl --silent --location -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.4.7/argocd-linux-amd64
    $ chmod +x /usr/local/bin/argocd

5 ) Expose argocd-server to external world by craeting loadBalancer
    $ kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

6 ) Wait about 3 minutes for the LoadBalancer creation
    $ kubectl get svc -n argocd

7 ) (extract)Get pasword and decode it.
    $ kubectl get secret argocd-initial-admin-secret -n argocd -o yaml
    you will get password decode using below command
    $ echo WXVpLUg2LWxoWjRkSHFmSA== | base64 --decode
    DNS name for the load balancer created for argocd cluster-copy that ans paste in browser
      login username-admin
            password- decoded password
      after login-> go to userinfo->update password->new password
                    then logout and login with new password

## Add EKS Cluster to ArgoCD
9 ) login to ArgoCD from CLI
      //url of argocd cluster
    $ argocd login a2255bb2bb33f438d9addf8840d294c5-785887595.ap-south-1.elb.amazonaws.com --username admin

10 ) 
     $ argocd cluster list

11 ) Below command will show the EKS cluster
     $ kubectl config get-contexts

12 ) Add above EKS cluster to ArgoCD with below command
     $ argocd cluster add i-08b9d0ff0409f48e7@nirosha-cluster.ap-south-1.eksctl.io --name nirosha-eks-cluster

13) check the added cluster
    $ argocd cluster list

##Get the gitops repository from the github- connect to argocd
 Go to argo cd dashboard->settings->connect repo->via https
                                                  type->git
                                                  project->default
                                                  give the reposistory url
                                                  username->github username
                                                  password->github personal access token 
                                    click on connect
  deployment yaml file image name and version should be same as dockerhub image name

##connect application to argocd dashboard
In the Argocd dashboard click new item
  application name->register-app
  project name->default
  sysnc policy->automatic
    tick 2options- prune resources & self heal
  select the repository url which you cretaed just ago
  path->./
  Destination->select EKS cluster from dropdown
  namespace-default
  click on create.
  
14) to check running pods
    kubectl get pods

15 ) service details of the service created in default namespace  
    $ kubectl get svc
      copy the DNS name:8080/webapp--->you can view the application

##create pipeline with name->gitops-register-app-cd
  tick> discard old builds->max of build to keep->4
  tick->this project is parameterised
                name-IMAGE_TAG
  tick->trigger builda remotely
        authentication token-gitops-token
  select pipeline script from SCM
        SCM->git->select gitops repository url
                  credentials->gituhub credentials
             branch-main
  apply->save

## add stage to the jenkins fiel register-app repo
        'Trigger CD pipeline' stage
            change DNS name here-> copy your dns name->check ij jenkins master node
          # JENKINS-API-TOKEN
              jenkins username:${JENKINS-API-TOKEN}
              Go to jenkins-Dashboard->myprofile->configure->API Token->add new token->generate->cpoy the token paste in notepad
              Go to manage jenkins->credentials->add credentials->
                                                ->secret text->paste the secret text which you generated just now
                                                ->ID->JENKINS-API-TOKEN
                                                ->desc->JENKINS-API-TOKEN->create
              add JENKINS-API-TOKEN in the environment variable block 
## create Jenkins file in thegitops-register-app repo 
    # add stage to the pipeline script
        'cleanup workspace' stage

    # add stage to the pipeline script
        'Checkout from SCM' stage
             ->add your gitops url
    
    # add stage to the pipeline script
        'Update the deployment tags' stage

    # add stage to the pipeline script
        'push deployment file to git' stage
              ->change to your github username
              ->change to your github email id
              ->change to your gitops repo

##set the trigger in jenkins CI job
 Jenkins dasjboard->register-app-ci->configure
                    ->under  build trigge->poll SCM-> * * * * *
                  ->apply->save

##update the code using git bash and verify the result.



============================================================= Cleanup =============================================================
$ kubectl get all
$ kubectl delete deployment.apps/nirosha-regapp       //it will delete the deployment
$ kubectl delete service/nirosha-service              //it will delete the service
$ eksctl delete cluster nirosha --region ap-south-1     OR    eksctl delete cluster --region=ap-south-1 --name=nirosha-cluster      //it will delete the EKS cluster
M
